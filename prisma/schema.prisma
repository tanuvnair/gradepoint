// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  password           String?
  organizations      UserOrganization[]
  ownedOrganizations Organization[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model Organization {
  id        String             @id @default(uuid())
  name      String             @unique
  ownerId   String             @unique // Each organization must have only one owner
  owner     User               @relation(fields: [ownerId], references: [id])
  users     UserOrganization[]
  invites   Invite[]
  createdAt DateTime           @default(now())
}

model UserOrganization {
  id             String @id @default(uuid())
  userId         String
  organizationId String
  role           Role

  user         User         @relation(fields: [userId], references: [id])
  organization Organization @relation(fields: [organizationId], references: [id])

  @@unique([userId, organizationId]) // Prevents duplicate memberships
}

enum Role {
  OWNER // Creator of the organization
  ADMIN // Can manage users, roles, and exams
  INSTRUCTOR // Can create and manage exams
  STUDENT // Can take exams
}

model Invite {
  id             String       @id @default(uuid())
  code           String       @unique
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id])
  role           Role
  expiresAt      DateTime
  used           Boolean      @default(false)
  createdAt      DateTime     @default(now())
}
