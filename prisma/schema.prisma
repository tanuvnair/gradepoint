datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  password           String?
  organizations      UserOrganization[]
  ownedOrganizations Organization[]

  // Exam relationships
  createdExams       Exam[]              @relation("ExamCreator")
  examAttempts       ExamAttempt[]
  examResponses      ExamResponse[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model Organization {
  id        String             @id @default(uuid())
  icon      String
  name      String             @unique
  ownerId   String
  owner     User               @relation(fields: [ownerId], references: [id])
  users     UserOrganization[]
  invites   Invite[]
  exams     Exam[]
  createdAt DateTime           @default(now())
  updatedAt DateTime           @default(now()) @updatedAt

  @@index([ownerId]) // Faster lookups by owner
}

model UserOrganization {
  id             String @id @default(uuid())
  userId         String
  organizationId String
  role           Role

  user         User         @relation(fields: [userId], references: [id])
  organization Organization @relation(fields: [organizationId], references: [id])

  @@unique([userId, organizationId]) // Prevent duplicate memberships
  @@index([role]) // Optimize queries filtering by role
}

enum Role {
  OWNER
  ADMIN
  INSTRUCTOR
  STUDENT
}

model Invite {
  id             String       @id @default(uuid())
  code           String       @unique
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id])
  role           Role
  expiresAt      DateTime
  used           Boolean      @default(false)
  createdAt      DateTime     @default(now())

  @@index([organizationId]) // Speeds up lookups for invites by organization
  @@index([expiresAt]) // Useful if filtering by expiration time
}

model Exam {
  id              String          @id @default(uuid())
  title           String
  description     String?
  timeLimit       Int?            // Time limit in minutes (null for no limit)
  passingScore    Float?          // Minimum score to pass (null for no passing score)
  randomizeOrder  Boolean         @default(false)
  publishedAt     DateTime?       // Null if draft

  startDate       DateTime?       // When the exam becomes available (null for immediately)
  endDate         DateTime?       // When the exam expires (null for never)
  allowedAttempts Int?            // Maximum number of attempts (null for unlimited)

  creatorId       String
  creator         User            @relation("ExamCreator", fields: [creatorId], references: [id])
  organizationId  String
  organization    Organization    @relation(fields: [organizationId], references: [id])

  sections        ExamSection[]
  attempts        ExamAttempt[]

  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt

  @@index([organizationId])
  @@index([creatorId]) // Added to optimize filtering by exam creator
  @@index([publishedAt]) // Useful when querying for published exams
  @@index([startDate, endDate]) // Composite index for exam availability queries
}

model ExamSection {
  id          String     @id @default(uuid())
  title       String
  description String?
  order       Int        // For ordering sections within an exam

  examId      String
  exam        Exam       @relation(fields: [examId], references: [id], onDelete: Cascade)

  questions   Question[]

  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  @@index([examId, order]) // Optimizes retrieving and ordering sections for an exam
}

enum QuestionType {
  MULTIPLE_CHOICE
  SHORT_ANSWER
  OPEN_ENDED
  CODE_BASED
}

model Question {
  id            String        @id @default(uuid())
  content       String        // The question text
  type          QuestionType
  points        Float         @default(1.0)
  order         Int           // Ordering within the section

  options       Json?         // For multiple choice, multiple answer, matching, etc.
  correctAnswer Json?         // Correct answer(s); format depends on question type

  sectionId     String
  section       ExamSection   @relation(fields: [sectionId], references: [id], onDelete: Cascade)

  responses     ExamResponse[]

  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  @@index([sectionId, order]) // Composite index to quickly fetch questions in order within a section
  @@index([type]) // Optional index if filtering by question type is common
}

model ExamAttempt {
  id           String         @id @default(uuid())
  startedAt    DateTime       @default(now())
  submittedAt  DateTime?      // Null if not yet submitted
  score        Float?         // Null until graded
  graded       Boolean        @default(false)

  userId       String
  user         User           @relation(fields: [userId], references: [id])
  examId       String
  exam         Exam           @relation(fields: [examId], references: [id])

  responses    ExamResponse[]

  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt

  @@index([userId])
  @@index([examId])
  @@index([submittedAt]) // Helps when filtering for completed (submitted) attempts
}

model ExamResponse {
  id           String       @id @default(uuid())
  response     Json         // The student's answer(s)
  isCorrect    Boolean?     // Null until graded
  score        Float?       // Points awarded (null until graded)
  feedback     String?      // Feedback on the response

  questionId   String
  question     Question     @relation(fields: [questionId], references: [id])
  attemptId    String
  attempt      ExamAttempt  @relation(fields: [attemptId], references: [id], onDelete: Cascade)
  userId       String
  user         User         @relation(fields: [userId], references: [id])

  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt

  @@unique([attemptId, questionId])
  @@index([questionId])
  @@index([userId])
  @@index([isCorrect]) // Optional index if you often query responses by correctness
}
